What happens when you initialize a repository? Why do you need to do it?

- git init is used to initialise a repository and tells git that you want to start tracking some of the files contained within it
- However you also need to get git what files to track which doesn't come through the git init command automatically
- You want git to track file changes for version control

How is the staging area different from the working directory and the repository?
What value do you think it offers?

- The staging area is the temporary area where file changes can be saved before committing to a repository
- You don't have to include all files in the staging area, just those that you wish to track changes to

How can you use the staging area to make sure you have one commit per logical
change?

- When a change to a file is made, use git status to check what files have been changed
- Use git add to add the file to the staging area so that you know the changes are in staging
- Then commit the file to repository using git commit (or git commit -m "" to bypass the editor)
- Use git log to check what the latest commits are
- Use variants of git diff to check changes between files

What are some situations when branches would be helpful in keeping your history
organized? How would branches help?

- Branches can be used to try out alternative features to be added to the code in small sections
- You don't need to re-save all of the code
- You can (hopefully) merge your changes back into the main code relatively easily
- If a change doesn't work out as planned you can just dispense with it and not worry further

How do the diagrams help you visualize the branch structure?

- The diagrams help to see where the end of a branch is and what checkouts can be made or merged back along the branch.

What is the result of merging two branches together? Why do we represent it in
the diagram the way we do?

- Two branches being merged together will bring all of the commits from both branches in line
- Any lines of the files that haven't changed will remain unchanged
- Any lines that have changed will be compared for the later updatee
- Once the branches are merged, the old branch that has been merged into master is no longer used/needed
- This is represented in the diagram by the old branch being brought into master signifying one version of the files

What are the pros and cons of Git's automatic merging vs. always doing merges
manually?
