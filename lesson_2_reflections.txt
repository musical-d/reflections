What happens when you initialize a repository? Why do you need to do it?

- git init is used to initialise a repository and tells git that you want to start tracking some of the files contained within it
- However you also need to get git what files to track which doesn't come through the git init command automatically
- You want git to track file changes for version control

How is the staging area different from the working directory and the repository?
What value do you think it offers?

- The staging area is the temporary area where file changes can be saved before committing to a repository
- You don't have to include all files in the staging area, just those that you wish to track changes to

How can you use the staging area to make sure you have one commit per logical
change?

- When a change to a file is made, use git status to check what files have been changed
- Use git add to add the file to the staging area so that you know the changes are in staging
- Then commit the file to repository using git commit (or git commit -m "" to bypass the editor)
- Use git log to check what the latest commits are
- Use variants of git diff to check changes between files

What are some situations when branches would be helpful in keeping your history
organized? How would branches help?

How do the diagrams help you visualize the branch structure?

What is the result of merging two branches together? Why do we represent it in
the diagram the way we do?

What are the pros and cons of Git's automatic merging vs. always doing merges
manually?
